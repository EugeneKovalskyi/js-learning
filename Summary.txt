\\\\\\\\\\\\\\\\\
1.   ЗАПОМНИТЬ   
\\\\\\\\\\\\\\\\\

>>  Для хранения number выделяется 64 бита: 52 - для чисел, 11 - для положения десятичной точки, 1 - для знака

>>  Object.is(NaN, NaN)   // true
>>  Object.is(0, -0)      // false
>>  NaN === NaN           // false
>>  null == undefined     // true   // Равны друг другу и не равны любому другому значению
>>  null > 0              // false  
>>  null == 0             // false  
>>  null >= 0             // true   
>>  undefined > 0         // false  // undefined преобразуется в NaN
>>  'some' > 'string'     // false  // Строки сравниваются посимвольно

>>  1 / 3                 // 0.3333333333333333
>>  10 / 3                // 3.3333333333333335 (округляет до ближайшего возможного согласно формату IEEE 754)
>>  NaN ** 0              // 1
>>  1 / 0                 // Infinity
>>  1 / 4                 // 0.25
>>  "str" / 2             // NaN (При любых математических операциях со строками вернет NaN, кроме +)
>>  1 + NaN               // NaN
>>  1 + '2'               // '12'
>>  '2' - 1               // 1
>>  true + false          // 1
>>  true + true           // 2
>>  undefined + undefined // NaN
>>  null + null           // 0
>>  NaN + NaN             // NaN
>>  [] + []               // '' (пустая строка)

>>  typeof(Math)          // object 
>>  typeof(null)          // object
>>  typeof(alert)         // function

>>  String(true)          // "true"
>>  String(null)          // "null"
>>  String(undefined)     // "undefined"

>>  Number(undefined)     // NaN
>>  Number(null)          // 0

>>  Boolean('0')          // true
>>  Boolean('')           // false
>>  Boolean(NaN)          // false
>>  Boolean(null)         // false
>>  Boolean(undefined)    // false

>>  Область видимости `var` ограничивается функцией
>>  if (false) var phrase - переменная phrase создасться, поскольку объявления var всплывают в начало фу-и
>>  == и Boolean() используют разные правила приведения типов

>>  Полифил - аналог метода в спецификации, который не поддерживается в более старой версией движка
>>  Инкапсуляция - разделение интерфейса на внутренний и внешний


\\\\\\\\\\\\\\\\\\\\\\\\\\\\
2.   Основные типы данных   
\\\\\\\\\\\\\\\\\\\\\\\\\\\\

      1. Number (спец. числовые значения: Infinity, -Infinity, NaN)                     

      2. BigInt (для работы с целыми числами произвольной длинны; добавить n в конце числа)

      3. String

      4. Boolean

      5. Null         

      6. Undefined

      7. Symbol

      8. Object
  

\\\\\\\\\\\\\\\\\\\\\\\\\\\\
3.   Преобразование типов   
\\\\\\\\\\\\\\\\\\\\\\\\\\\\

      1.  Строковое (String(value))
      2.  Числовое (Number(value), '6' / '2' = 3)
      3.  Логическое (Boolean(value))


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
4.   Выражения и Операторы   
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

- унарные
- бинарные
- сравнения
- логические

++value   > возвращает новое значение

value++   > возвращает старое значение

==        > преобразуют операнды к числу

===       > проверяет равенство без приведения типов

||        > возвращает первое истинное значение, либо последнее при всех false

||=       > Логическое присваивание ИЛИ - если операнд слева falsy, то ему присваивается операнд справа

&&        > возвращает первое ложное значение, либо последнее при всех true

&&=       > Логическое присваивание И - если операнд слева truthy, то ему присваивается операнд справа

??        > Оператор нулевого слияния (Nullish coalescing operator) - возвращает первый аргумент,
            если он не null/undefined. Запрещено использовать с && и ||
            result = a ?? b - эквивалент записи - result = (a !== null && a !== undefined) ? a : b

??=       > Оператор нулевого присваивания - если операнд слева undefined/null, то ему присваивается операнд справа

?.        > Оператор опциональной последовательности 
            (https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Optional_chaining)

            

\\\\\\\\\\\\\
5.   Циклы   
\\\\\\\\\\\\\

>> Циклы игнорируют СИМВОЛЬНЫЕ и НЕПЕРЕЧИСЛИМЫЕ свойства объектов

>> Директивы break/continue поддерживают метки, чтобы выйти из любого уровня вложенности циклов:
      labelName: for (...) {
        ...
        break/continue labelName;
      }


\\\\\\\\\\\\\\\
6.   Функции   
\\\\\\\\\\\\\\\

      1. Function Declaration                          : function foo() {} 
            > В Lexical Environment инициализируется мгновенно и полностью
      
      2. Function Expression                           : let foo = function() {} 
            > Не имеет        this
            > Не имеет        super
            > Не имеет        "arguments"
            > Не могут        быть вызваны с new

      3. Named Function Expression (NFE)               : let foo = function bar() {} 
            > Function Expression с именем 
            > Для рекурсивных вызовов 
            > Недоступна за пределами фу-и;

      4. new Function([arg1, ..., argN], functionBody) : let foo = new Function('a', 'b', 'return a + b')
            > Имеет [[Environment]], ссылающийся на глобальное лексическое окружение

      5. Шаблонные функции - foo`some text and ${arg1} and ${arg2}`


>> new.target - исп. внутри фу-и, чтобы проверить вызвана ли фу-я при помощи new
>> isNaN() и isFinite() отличаются от Number.isNaN() и Number.isFinite()
>> Object.is() идентичен === , кроме 2-х случаев
>> parseInt('100px', 10) === 100
>> str.codePointAt(pos) // код символа на позиции pos
>> String.fromCodePoint(code)
>> foo.name - имя фу-и
>> foo.length - ко-во аргументов в объявлении фу-и. Остаточные параметры не считаются
>> call  - принимает список аргументов
>> apply - принимает псевдомассив
>> bind  - возвращает экзотический объект bound function, который фиксирует контекст и аргументы только во время создания
>> [].join.call(arguments) // пример заимствования метода с помощью call


>> Контекст выполнения - спец. внутренняя структура данных, которая содержит информацию о вызове фу-и 
    (место логического курсора, локальные переменные фу-и, значение this и пр.)

>> Применение рекурсии:
      - рекурсивные обходы (объект в объекте в объекте...)
      - рекурсивные структуры (связанный список)

>> arguments - подобный массиву объект содержащий ВСЕ переданные в фу-ю аргументы, не поддерживает методы массивов. 

>> Lexical Environment - объект спецификации: он описан в спецификации для описания того, 
                         как все работает, его нельзя получить

>> Переменная - свойство спец. внутр. объекта Environment Record (хранилище переменных).
                Поиск искомой переменной происходит сначала во внутреннем Lexical Environment, 
                затем во внешнем, и так до глобального объекта

>> Вложенный setTimeout гарантирует фиксированную задержку после выполнения фу-и

>> Браузер ограничивается 4 мс минимальной задерожки между более 4 вызовов setTimeout или setInterval

>> Декораторы (Decorators) - обертка вокруг фу-и, которая изменяет ее поведение

>> Частичное применение - создание новой фу-и с некоторыми фиксированными аргументами (double = multiple.bind(null, 2))


\\\\\\\\\\\\\\\
7.   Объекты    
\\\\\\\\\\\\\\\

>> null и undefined НЕ имеют объектов-оберток. У них нет: свойств, методов, прототипов

>> Все ключи объектов преобразуются в строки (кроме символов и строк)

>> this - указывает на объект перед точкой

>> ?. - опциональная цепочка (optional chaining) - останавливает вычисление и возвращает undefined,
        если значение слева === undefined или === null 
        - работает только с объявленными объектами
        - работает только для ЧТЕНИЯ и УДАЛЕНИЯ
        - работает для вызова фу-и, которой может не существовать ( obj.method?.() )
        - работает для объектов со свойствами в квадратных скобках ( obj?.[prop] )

>> Варианты преобразования типов (хинты): 1. "string"
                                          2. "number"
                                          3. "default"

>> [Symbol.isConcatSpreadable]: true - спец. свойство объекта, которое указывает методу array.concat(obj) обрабатывать obj как массив
                                       * Пример:
                                                let array = [1, 2]
                                                let obj = { 0: 'someValue', 1: 'anotherValue' }
                                                ( array.concat(obj) ) // 1, 2, someValue, anotherValue

>> [Symbol.toStringTag]: 'Value' - спец. свойство объекта для настройки toString у объектов.
                                   Это свойство есть у большей части встроенных объектов.
                                   Результат === значение этого свойства обернутое в [object Value]

>> Дескриптор свойства - объект, который содержит значение и флаги (атрибуты) свойства
>> Атрибуты дескриптора для date properties: 
      - value 
      - writable        === false, value нельзя изменить
      - enumerable      === false, свойство игнорируется циклом, Object.keys
      - configurable    === false, нельзя удалить, нельзя изменить значение всех атрибутов с false на true

>> Object.getOwnPropertyDescriptor(obj, propName)       - возвращает дескриптор свойства
>> Object.getOwnPropertyDescriptors(obj)                - возвращает объект, содержащий дескрипторы всех свойств
>> Object.defineProperty(obj, propName, descriptor)     - возвращает obj
>> Object.defineProperties(obj, { prop: descriptor })   - возвращает obj
>> let clone = Object.defineProperties({}, Object.getOwnPropertyDescriptors(obj)) - клонирование объекта вместе с флагами


>> Типы свойств:
      - Data properties (свойства-данные)
      - Accessor properties (свойства-аксессоры) 

>> Accessor properties - фу-и, которые исп. для получения и присвоения значения, но синтаксически выглядит как свойство объекта
      let obj = {
            get propName() {}       - срабатывает при чтении obj.propName
            set propName(value) {}  - срабатывает при записи obj.propName = value 
      }
  
>> Атрибуты дескриптора для accessor properties:
      - get            // { get() { return this.name } }
      - set            // { set(value) { this.name = value } }
      - enumerable
      - configurable


\\\\\\\\\\\\\\\\\
8.   Прототипы   
\\\\\\\\\\\\\\\\\

>> [[Prototype]] - скрытое свойство, либо === null, либо ссылается на другой объект - прототип
      - Замена [[Prototype]] в существующих объектах ОЧЕНЬ медленная операция ( Object.setPrototypeOf и obj.proto = )

>> obj.__proto__ - это getter/setter для [[Prototype]], то есть способ доступа до

>> Операции запись/удаление не работают с прототипом (за исключением свойства-аксессора setter)

>> this - указывает на объект перед точкой

>> Циклы учитывают унаследованные свойства
>> Object.keys, Object.values и др. - игнорируют унаследованные свойства

>> Foo.prototype = {}/null - определяет __proto__ только для экземпляров new Foo
      function Foo() {} > Foo.prototype = obj2 > let obj1 = new Foo() > obj.__proto__ === obj2
>> Foo.prototype === { constructor: Foo }
>> obj.__proto__ === arr.__proto__.__proto__ === func.__proto__.__proto__ === Number(5).__proto__.__proto__ === Object.prototype

>> obj.join = Array.prototype.join // пример заимствования метода с помощью prototype

>> Вместо __proto__ : 1. Object.create(proto, [descriptor])       // создает {} со свойством [[Prototype]] и дескриптором
                      2. Object.getPrototypeOf(obj)               // возвращает [[Prototype]]
                      3. Object.setPrototypeOf(obj, proto)        // устанавлиавает [[Prototype]]

>> let clone = Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj))

>> Простейший объект (ассоциативный массив) - создается через new Map / Object.create(null) / obj.__proto__ = null 

>> obj['__proto__'] = 'someValue' // присвоение проигнорируется


\\\\\\\\\\\\\\
9.   Классы   
\\\\\\\\\\\\\\

>> Класс - шаблон кода для создания объектов, который устанавливает в них начальные свойства и методы

>> [[IsClassConstructor]]: true - спец. внутр. свойство фу-и, созданной с помощью class 
>> Методы и constructor - сохраняются в SomeClass.prototype
>> Методы класса неперечисляемы
>> Классы всегда используют 'use strict'
>> (Named) Class Expression - аналог (Named) Function Expression

>> class Child extends Parent : 
      - Child.prototype.__proto__ === Parent.prototype
      - после extends разрешены любые выражения

>> super.method() - вызывает родительский метод
>> super()        - вызывает конструктор родителя (работает только в дочернем конструкторе)

>> При отсутсвии конструктора, вызывается пустой конструктор ( constructor(...args) { super(...args) } )
>> Конструкторы в дочерних классах должны обязательно вызывать конструктор родителя ( super() ) перед использованием this 
>> [[ConstructorKind]]: 'derived' - спец. внутр. свойство функции-конструктора дочернего класса.
                                    Такой конструктор ожидает вызова конструктора родительского класса,
                                    который создаст пустой объект и присвоет его this.
                                    Поэтому, если мы создаем конструктор в дочернем классе, необходимо вызвать super,
                                    иначе объект для this не будет создан и мы получим ошибку.

>> Родительский конструктор всегда использует СВОЕ ЗНАЧЕНИЕ ПОЛЯ, а не переопределенное дочерним классом
>> Поля РОДИТЕЛЬСКОГО класса инициализируются перед конструктором
>> Поля ДОЧЕРНЕГО класса инициализируются после вызова super

>> [[HomeObject]] : 
      - спец. внутр. свойство методов класса (объекта) и оно равно этому классу (объекту)
      - используется только в super, чтобы получить прототип родителя и его методы
      - нельзя изменить, поэтому копировать метод использующий super, между объектами небезопасно
      - в объектах работает только в методах объявленных как method()

>> Статические свойства и методы класса - устанавливаются самому классу:
      - наследуются дочерним классом ( Child.[[Prototype]] = Parent ) 
      - НЕ наследются от встроенных классов
      - this === сам класс ( по аналогии с объектами )
      - экземплярам класса НЕДОСТУПНЫЕ
      - СИНТАКСИС: 
            1. class MyClass {
                  static property = ...
                  static method() { ... }
            };

            2. MyClass.property = ...
               MyClass.method   = ...
              
>> Защищенные методы и свойства - по соглашению JS-программистов:
      - доступны только внутри класса
      - начинаются с префикса ' _ '

>> Приватные методы и свойства:
      - начинаются со спец. символа ' # '
      - доступны исключительно внутри класса
      - не наследуются
      - не конфликтуют с публичными
      - не работает с this ( this['#prop'] - не работает )

>> Symbol.species - спец. статический getter, который должен вернуть конструктор,
                    который будет использован для создания новых объектов:
                    * Пример: 
                        class ExtendedArray extends Array {
                              static get [Symbol.species]() { return Array }
                        }           
                        let array = new ExtendedArray(1, 2, 3, 4, 5)
                        let filteredArray = array.filter(item => item >=3)
                        ( filteredArray.__proto__ === array.__proto__ ) // false
      
>> instanceof - оператор проверяет, принадлежит ли объект указанному классу, с учетом наследования
                Алгоритм работы: 
                        1. Если в классе есть статичный метод [Symbol.hasInstance], то вызвать его ( должен возвращать true/false):
                              * Пример:
                                    class Animal {
                                          static [Symbol.hasInstance](obj) { if (obj.catEat) return true }
                                    }
                                    let obj = { catEat }
                                    ( obj instanceof Animal ) // true

                        2. Проверка на равенство прототипа класса какому либо прототипу в прототипной цепочке объекта: 
                              ( Class.prototype === obj.__proto__ )
                              ( Class.prototype === obj.__proto__.__proto__ ) и т.д.

>> objA.isPrototypeOf(objB) - аналог instanceof: ( obj instanceof Class === Class.prototype.isPrototypeOf(obj) )

>> Примеси (Mixins) - класс, методы которого предназначены для расширения функциональности других классов без наследования от примеси.
                    - Примесь необходимо скопировать в прототип расширяемого класса ( Object.assign(ClassName.prototype, mixin) )
                    - Примесь перезаписывает существующие методы класса

>> JavaScript НЕ поддерживает множественное наследование. Вместо него используют Mixins


\\\\\\\\\\\\\\\\\\\\\\\\\\
10.   Тип данных Symbol   
\\\\\\\\\\\\\\\\\\\\\\\\\\

      1. Symbol.for(key) 
      2. Symbol.keyFor(symbol)
      3. Object.getOwnPropertySymbols(obj)
      4. Reflect.ownKeys(obj)
      5. Symbol.toPrimitive

>> Свойства, чьи ключи Символы игнорируются циклом for...in и Object.keys()


\\\\\\\\\\\\\\\\\\
11.   Замыкание   
\\\\\\\\\\\\\\\\\\

>> Замыкание - это фу-я, которая с помощью скрытого свойства [[Environment]] запоминает свои внешние переменные
               и может получить к ним доступ. ( https://learn.javascript.ru/closure )
               

/////////////////////////
12.   Обработка ошибок
/////////////////////////

>> try {} catch() {} finally {} - работает синхронно, то есть ассинхронный код игнорируется
      - finally выполняется всегда, в т.ч. после return 
      - при возникновении ошибки JS генерирует объект ошибки и передает как аргумент в блок catch
      - catch должен обрабатывать только известные ему ошибки, а остальные пробрасывать ( throw error )

>> throw <объект ошибки> - оператор генерирующий ошибку

>> window.onerror = function (message, url, line, column, error) {} - глобальный catch

>> Сервисы для логирования ошибок:
      - https://errorception.com
      - http://www.muscula.com

>> Расширение встроенных классов ошибок:
      - class MyError extends Error
      - вызвать super
      - изменить name ( this.name = this.constructor.name - чтобы не прописывать вручную name)

>> instanceof - использовать для проверки типа ошибок (при расширении классов ошибок)

>> Обертывание исключений - алгоритм: фу-я ловит низкоуровневые исключения и создает 1 высокоуровневое
      

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
* * *   Полезный софт   * * *   
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

------------------------------------
* 1. Cache-Wrapper + call + apply 
------------------------------------
let workers = {
   someProp: 10,
    
   someMethod(arg1, arg2) {
   return arg1 + arg2 + this.someProp
   },
}

workers.someMethod = cachingDecorator(workers.someMethod, hash)
    
function hash() {
   return [].join.call(arguments)
}
    
function cachingDecorator(func, hash) {
   let cache = new Map()
    
   return function (...args) {
      let key = hash(arguments)
   
      if (cache.has(key)) return cache.get(key)
    
      let result = func.apply(this, args)
    
      cache.set(key, result)
    
      return result
   }
}

console.log(workers.someMethod(1, 2))


------------------------------------------------------
* 2. Object.prototype.toString - расширенный typeof
------------------------------------------------------

let objToString = Object.prototype.toString

let user           = { [Symbol.toStringTag]: 'User' }       
let array          = []                                     
let number         = 123                                    
let string         = 'str'                                  
let boolean        = true                                   
let nullValue      = null                                   
let functionValue  = alert                                  
let undefinedValue = undefined                              

objToString.call(user)              // [object User]    
objToString.call(array)             // [object Array]
objToString.call(number)            // [object Number]
objToString.call(string)            // [object String]
objToString.call(boolean)           // [object Boolean]
objToString.call(nullValue)         // [object Null]
objToString.call(functionValue)     // [object Function]
objToString.call(undefinedValue)    // [object Undefined]


------------------------------
* 3. Обёртывание исключений
------------------------------

class ReadError extends Error {
      constructor(message, cause) {
        super(message)
        this.cause = cause
        this.name = 'ReadError'
      }
}
    
class ValidationError extends Error {
      constructor(message) {
            super(message)
            this.name = this.constructor.name
      }
}
    
class PropertyRequiredError extends ValidationError {
      constructor(property) {
            super('Absent property: ' + property)
            this.property = property
      }
}
    
function readUser(json) {
      let user
    
      try {
            user = JSON.parse(json)
      } catch (error) {
            if (error instanceof SyntaxError) throw new ReadError(error.name, error)
            else throw error
      }
    
      try {
            validateUser(user)
      } catch (error) {
            if (error instanceof ValidationError) throw new ReadError(error.name, error)
            else throw error
      }
}
    
function validateUser(user) {
      if (!user.age) throw new PropertyRequiredError('age')
      if (!user.name) throw new PropertyRequiredError('name')
    
      return user
}
    
try {
      readUser('{ "name": "k", "age": 25 }')
} catch (error) {
      if (error instanceof ReadError) {
            console.log(`${error.name}: ${error.cause}`)
      } else throw error
}